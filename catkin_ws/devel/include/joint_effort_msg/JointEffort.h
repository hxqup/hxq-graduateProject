// Generated by gencpp from file joint_effort_msg/JointEffort.msg
// DO NOT EDIT!


#ifndef JOINT_EFFORT_MSG_MESSAGE_JOINTEFFORT_H
#define JOINT_EFFORT_MSG_MESSAGE_JOINTEFFORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joint_effort_msg
{
template <class ContainerAllocator>
struct JointEffort_
{
  typedef JointEffort_<ContainerAllocator> Type;

  JointEffort_()
    : effort()  {
    }
  JointEffort_(const ContainerAllocator& _alloc)
    : effort(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _effort_type;
  _effort_type effort;





  typedef boost::shared_ptr< ::joint_effort_msg::JointEffort_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_effort_msg::JointEffort_<ContainerAllocator> const> ConstPtr;

}; // struct JointEffort_

typedef ::joint_effort_msg::JointEffort_<std::allocator<void> > JointEffort;

typedef boost::shared_ptr< ::joint_effort_msg::JointEffort > JointEffortPtr;
typedef boost::shared_ptr< ::joint_effort_msg::JointEffort const> JointEffortConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_effort_msg::JointEffort_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_effort_msg::JointEffort_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_effort_msg::JointEffort_<ContainerAllocator1> & lhs, const ::joint_effort_msg::JointEffort_<ContainerAllocator2> & rhs)
{
  return lhs.effort == rhs.effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_effort_msg::JointEffort_<ContainerAllocator1> & lhs, const ::joint_effort_msg::JointEffort_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_effort_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::joint_effort_msg::JointEffort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_effort_msg::JointEffort_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_effort_msg::JointEffort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_effort_msg::JointEffort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_effort_msg::JointEffort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_effort_msg::JointEffort_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_effort_msg::JointEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a8f7ca4b38fbe820a7205cc08e38abf";
  }

  static const char* value(const ::joint_effort_msg::JointEffort_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a8f7ca4b38fbe82ULL;
  static const uint64_t static_value2 = 0x0a7205cc08e38abfULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_effort_msg::JointEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_effort_msg/JointEffort";
  }

  static const char* value(const ::joint_effort_msg::JointEffort_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_effort_msg::JointEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] effort\n"
;
  }

  static const char* value(const ::joint_effort_msg::JointEffort_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_effort_msg::JointEffort_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointEffort_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_effort_msg::JointEffort_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_effort_msg::JointEffort_<ContainerAllocator>& v)
  {
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_EFFORT_MSG_MESSAGE_JOINTEFFORT_H
