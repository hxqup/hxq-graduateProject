// Generated by gencpp from file joint_effort_msg/JointEfforts.msg
// DO NOT EDIT!


#ifndef JOINT_EFFORT_MSG_MESSAGE_JOINTEFFORTS_H
#define JOINT_EFFORT_MSG_MESSAGE_JOINTEFFORTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joint_effort_msg
{
template <class ContainerAllocator>
struct JointEfforts_
{
  typedef JointEfforts_<ContainerAllocator> Type;

  JointEfforts_()
    : Joint1Effort(0.0)
    , Joint2Effort(0.0)
    , Joint3Effort(0.0)
    , Joint4Effort(0.0)
    , Joint5Effort(0.0)
    , Joint6Effort(0.0)  {
    }
  JointEfforts_(const ContainerAllocator& _alloc)
    : Joint1Effort(0.0)
    , Joint2Effort(0.0)
    , Joint3Effort(0.0)
    , Joint4Effort(0.0)
    , Joint5Effort(0.0)
    , Joint6Effort(0.0)  {
  (void)_alloc;
    }



   typedef double _Joint1Effort_type;
  _Joint1Effort_type Joint1Effort;

   typedef double _Joint2Effort_type;
  _Joint2Effort_type Joint2Effort;

   typedef double _Joint3Effort_type;
  _Joint3Effort_type Joint3Effort;

   typedef double _Joint4Effort_type;
  _Joint4Effort_type Joint4Effort;

   typedef double _Joint5Effort_type;
  _Joint5Effort_type Joint5Effort;

   typedef double _Joint6Effort_type;
  _Joint6Effort_type Joint6Effort;





  typedef boost::shared_ptr< ::joint_effort_msg::JointEfforts_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_effort_msg::JointEfforts_<ContainerAllocator> const> ConstPtr;

}; // struct JointEfforts_

typedef ::joint_effort_msg::JointEfforts_<std::allocator<void> > JointEfforts;

typedef boost::shared_ptr< ::joint_effort_msg::JointEfforts > JointEffortsPtr;
typedef boost::shared_ptr< ::joint_effort_msg::JointEfforts const> JointEffortsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_effort_msg::JointEfforts_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_effort_msg::JointEfforts_<ContainerAllocator1> & lhs, const ::joint_effort_msg::JointEfforts_<ContainerAllocator2> & rhs)
{
  return lhs.Joint1Effort == rhs.Joint1Effort &&
    lhs.Joint2Effort == rhs.Joint2Effort &&
    lhs.Joint3Effort == rhs.Joint3Effort &&
    lhs.Joint4Effort == rhs.Joint4Effort &&
    lhs.Joint5Effort == rhs.Joint5Effort &&
    lhs.Joint6Effort == rhs.Joint6Effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_effort_msg::JointEfforts_<ContainerAllocator1> & lhs, const ::joint_effort_msg::JointEfforts_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_effort_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_effort_msg::JointEfforts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_effort_msg::JointEfforts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_effort_msg::JointEfforts_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d5515d02554fcac322f06400d9105c8";
  }

  static const char* value(const ::joint_effort_msg::JointEfforts_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d5515d02554fcacULL;
  static const uint64_t static_value2 = 0x322f06400d9105c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_effort_msg/JointEfforts";
  }

  static const char* value(const ::joint_effort_msg::JointEfforts_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Joint1Effort\n"
"float64 Joint2Effort\n"
"float64 Joint3Effort\n"
"float64 Joint4Effort\n"
"float64 Joint5Effort\n"
"float64 Joint6Effort\n"
;
  }

  static const char* value(const ::joint_effort_msg::JointEfforts_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Joint1Effort);
      stream.next(m.Joint2Effort);
      stream.next(m.Joint3Effort);
      stream.next(m.Joint4Effort);
      stream.next(m.Joint5Effort);
      stream.next(m.Joint6Effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointEfforts_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_effort_msg::JointEfforts_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_effort_msg::JointEfforts_<ContainerAllocator>& v)
  {
    s << indent << "Joint1Effort: ";
    Printer<double>::stream(s, indent + "  ", v.Joint1Effort);
    s << indent << "Joint2Effort: ";
    Printer<double>::stream(s, indent + "  ", v.Joint2Effort);
    s << indent << "Joint3Effort: ";
    Printer<double>::stream(s, indent + "  ", v.Joint3Effort);
    s << indent << "Joint4Effort: ";
    Printer<double>::stream(s, indent + "  ", v.Joint4Effort);
    s << indent << "Joint5Effort: ";
    Printer<double>::stream(s, indent + "  ", v.Joint5Effort);
    s << indent << "Joint6Effort: ";
    Printer<double>::stream(s, indent + "  ", v.Joint6Effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_EFFORT_MSG_MESSAGE_JOINTEFFORTS_H
